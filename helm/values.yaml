# configure connaisseur deployment
deployment:
  replicasCount: 3
  image: securesystemsengineering/connaisseur:v1.5.0
  imagePullPolicy: Always
  resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi
  nodeSelector: {}
  tolerations: []
  affinity: {}
  # bootstrap sentinel timeout in seconds
  # deployment will fail if Connaisseur pods do not report ready within this timeframe
  sentinelTimeout: 60

# configure connaisseur service
service:
  type: ClusterIP
  port: 443

# configure access to the notary server
notary:
  # domain to the notary server. can be `null` or non-existant to use
  # the public Docker Hub notary server
  host: notary.docker.io
  # only for insecure notary instances with selfsigned certificates.
  selfsigned: false
  # selfsignedCert: |
  #   -----BEGIN CERTIFICATE-----
  #   -----END CERTIFICATE-----

  # if notary uses an authentication server, give a user and password
  # with pull rights
  # The default we use is the notary instance from docker.io which is
  # accessible without authentication for public repositories
  auth:
    enabled: false
    # enter user/pass directly
    # these are placeholders and should be changed!
    user: notaryuser
    password: Password123
    # or use a predefined secret, which needs the fields 'NOTARY_USER'
    # and 'NOTARY_PASS'
    secretName: null
  # the public part of the root key, for verifying notary's signatures
  rootPubKey: |
    -----BEGIN PUBLIC KEY-----
    -----END PUBLIC KEY-----
  # if you use Azure Container Registry (ACR) for your notary
  # changes some behaviour, such as health probes and how to retrieve auth tokens
  # for compatibility with ACR set to `true`
  isAcr: false

# the image policy, which defines all repositories that need to be
# verified. more detail in the git repo README.md
policy:
  - pattern: "*:*"
    verify: true
  - pattern: "k8s.gcr.io/*:*"
    verify: false
  - pattern: "docker.io/securesystemsengineering/connaisseur:*"
    verify: false


# in detection mode, deployment will not be denied, but only prompted
# and logged. This allows testing the functionality without
# interrupting operation.
detection_mode: false

# debug: true

# alerting is implemented in form of simple POST requests with json payload
# you can use and/or adapt the predefined Slack/OpsGenie/Keybase templates and the examples below
# to channel alert notifications to the Slack/OpsGenie/Keybase or create a custom template for a customized alert
# payload to use with a simple POST request to the receiver_url to receive alerts.
# Parameters you can use in your templates are "alert_message", "priority", "connaisseur_pod_id", "cluster",
# "timestamp", "request_id" and "images" each one basically meaning what their names indicate

alerting:
  config_dir_path: "/app/config"
  cluster_name: "minikube"
#  admit_request:
#    message: "CONNAISSEUR admitted a request"
#    templates:
#       # template value needs to match one of the filenames of the contents of the 'alert_payload_templates' directory
#      - template: opsgenie_template
#        receiver_url: https://api.eu.opsgenie.com/v2/alerts
#        priority: 4
#        custom_headers: '{"Authorization": "GenieKey 12345678-abcd-2222-3333-1234567890ef"}'
#        payload_fields:
#          responders:
#            - username: "testuser@testcompany.de"
#              type: user
#          visibleTo:
#            - username: "testuser@testcompany.de"
#              type: user
#          tags:
#            - "deployed_an_image"
#        fail_if_alert_sending_fails: True
#      - template: slack_template
#        receiver_url: https://hooks.slack.com/services/A0123456789/ABCDEFGHIJ/HFb3Gs7FFscjQNJYWHGY7GPV
#        priority: 3
#        fail_if_alert_sending_fails: False
#  reject_request:
#    message: "CONNAISSEUR rejected a request"
#    templates:
#      - template: keybase_template
#        receiver_url: https://bots.keybase.io/webhookbot/IFP--tpV2wBxEP3ArYx4gVS_B-0
#        priority: 3
#        fail_if_alert_sending_fails: True
#        custom_headers: '{"Content-Language": "de-DE"}'
